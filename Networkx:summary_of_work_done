Networkx:
 Python package to construct and do computations on graphs.
 Graph is to store friendship between users. 
 This graph is constructed and stored for future usage in ranking algorithm (i.e) identify the friends of the user who are most similar to him/her.

Work done so far:
	- Scrapped twitter (using the rest end points exposed) to fetch users and their friends in a breadth first fashion.
	- The user information collected is stored(persistent) in a no-sql db
	- This user information (including friendship) is used to construct a social network graph
	- Few measures like centrality and similarity are computed to get a picture of the social network constructed.
	- As expected, there are many users with minimal friends and a few users with maximum friends. So we are handling both the cases differently when analysed in the ranking algorithm section.
	- On a side note, visualizations have also been done for the social network constructed (around 50K edges) using D3, matplotlib.  


Ranking Algorithm: (SPOT purely relies on friends location to predict a user's geolocation. This section covers how to implement that approach - at a very high level)
Step 1: (Use social tightness model to predict similarity between users)
 For a given user, identify the most important friends. This is done by identifying most similar friends to the particular user (by using one of the similarity measures).
 The next step is to rank the identified friends based on their similarity with the user and predicting (or fetching if already available from user data) their locations
 Then, weigh the top k locations predicted using the NER algorithm against the lcoation of the important friends of the given user.

An important point is that the location prediction of a given user (say the important friends of a user) has to be done using confidence based iteration method.
This is because not many users' location information is available readily. Hence we estimate a user's location and use this estimate in successive iterations.
The feature set considered to measure the confidence of an estimated location might be:
	- identify friends whose location estimations are closer to the user's predicted location. - SPOT uses this approach
	- we could also leverage on other methods if any.